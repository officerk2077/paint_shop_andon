
const SIMULATION_TICK_RATE = 1000; // T·ªëc ƒë·ªô m√¥ ph·ªèng (ms)

// Bi·∫øn c·ª•c b·ªô
let io; // S·∫Ω ƒë∆∞·ª£c g√°n trong h√†m initialize
let pool;
let stationsData = {};
let activeVehicles = [];
let errorTypesData = [];
let simulationIntervalId = null;
// C·ªù ch√≠nh cho logic t·∫°m d·ª´ng m·ªõi (ch·ªâ d·ª´ng c√°c tr·∫°m kh√¥ng ph·∫£i l√≤)
let isPausedForNonOvens = false;

// === IDs Tr·∫°m ƒê·∫∑c Bi·ªát ===
const BUFFER_STATION_ID = 0;        // Buffer ·∫£o
const LOADING_STATION_ID = 1;       // Loading (tr·∫°m ƒë·∫ßu ti√™n)
const ED_OBS_ID = 5;
const OVEN_STATION_IDS = [4, 14]; 
const PM_INSPECTION_ID = 10;
const PM_REPAIR_ID = 23;
const PREPARE_ID = 12;
const TOPCOAT_INSPECTION_ID = 17;
const OFFLINE_REPAIR_ID = 25;

const PAUSE_BYPASS_IDS = [ED_OBS_ID, OFFLINE_REPAIR_ID, 9, 15]; 


const FINISHING_ID = 18;
const WAIT_RECOAT_ID = 24;
const CHECKPOINT_STATION_IDS = [1, 12, 17, 19];
const PRIMER_STORAGE_ID = 9;
const PRIMER_TC_OVEN_ID = 14;
const TOPCOAT_STORAGE_ID = 15;
const BUFFER_MASKING_ID = 16;
const A1_OBS_ID = 20;
const HANGER_AGV_ID = 22;

const PM_INSPECTION_FAILURE_RATE = 0.1; // 10%
const TOPCOAT_FAILURE_RATE = 0.1; // T·ª∑ l·ªá l·ªói Topcoat

// === Truy V·∫•n SQL ===
const SELECT_VEHICLES_QUERY = `
    SELECT
        v.*, v.stationEntryTime as dbStationEntryTime,
        cb.model_name, cb.target_color, cb.color_hex,
        et.name AS current_error_name
    FROM vehicles v
    JOIN car_bodies cb ON v.body_id = cb.body_id
    LEFT JOIN error_types et ON v.current_error_type_id = et.id
`;

// ======================================
// === H√ÄM TI·ªÜN √çCH ===
// ======================================

async function logEvent(type, message) {
    let insertedId = null;
    try {
        const query = 'INSERT INTO logs (type, message) VALUES (?, ?)';
        const [result] = await pool.execute(query, [type, message]);
        insertedId = result.insertId;
    } catch (error) { 
        console.error(`DB Log Error: ${error.message}`); 
    }

    if (insertedId && io) {
        io.emit('new-log', { id: insertedId, timestamp: new Date().toISOString(), type, message });
    }
}

function getState() {
    // ƒê·∫£m b·∫£o ch·ªâ g·ª≠i d·ªØ li·ªáu c·∫ßn thi·∫øt qua Socket.IO
    const cleanVehicles = JSON.parse(JSON.stringify(activeVehicles))
        .map(({ timerId, dbStationEntryTime, ...vehicleData }) => vehicleData);
    const stationsCopy = JSON.parse(JSON.stringify(Object.values(stationsData)));
    return { stations: stationsCopy, vehicles: cleanVehicles };
}

function updateAndBroadcastState() {
    if (!io) {
        console.error("Update State Error: io object is not initialized!");
        return;
    }
    const currentState = getState();
    currentState.stations.forEach(station => {
        station.vehicles = currentState.vehicles
            .filter(v => v.current_station_id === station.id)
            .sort((a, b) => a.slot_position - b.slot_position);
    });
    io.emit('state-update', currentState);
}

function getNextStationId(vehicle) {
    if (['error_stoppage', 'error_logic'].includes(vehicle.status)) return vehicle.current_station_id;

    const currentStationId = vehicle.current_station_id;

    switch (currentStationId) {
        case PM_REPAIR_ID: return PREPARE_ID;
        case PM_INSPECTION_ID:
            return vehicle.status === 'rework' ? PM_REPAIR_ID : 11;
        case TOPCOAT_INSPECTION_ID:
            return vehicle.status === 'rework_pending' ? OFFLINE_REPAIR_ID : FINISHING_ID;
        case OFFLINE_REPAIR_ID:
            // S·ª≠a logic: Khi rework_pending, n√≥ KH√îNG n√™n tr·∫£ v·ªÅ currentStationId (g√¢y l·∫∑p)
            // N√≥ ch·ªâ n√™n di chuy·ªÉn khi status l√† 'ok' ho·∫∑c 'rework_offline'
            if (vehicle.status === 'ok') return FINISHING_ID;
            if (vehicle.status === 'rework_offline') return WAIT_RECOAT_ID;
            return currentStationId; // Gi·ªØ nguy√™n n·∫øu l√† rework_pending (nh∆∞ng s·∫Ω b·ªã ch·∫∑n b·ªüi logic tick)
        case WAIT_RECOAT_ID: return PREPARE_ID;
        case PRIMER_TC_OVEN_ID:
            // *** LOGIC R·∫º NH√ÅNH ***
            // Ki·ªÉm tra primer_lap_count (v·∫´n l√† 0 ·ªü l·∫ßn ƒë·∫ßu ti√™n).
            // N·∫øu < 1 (l√† 0), quay l·∫°i Tr·∫°m 9.
            // N·∫øu >= 1 (l√† 1), ƒëi ti·∫øp Tr·∫°m 15.
            return vehicle.primer_lap_count < 1 ? PRIMER_STORAGE_ID : TOPCOAT_STORAGE_ID;
        default:
            const mainFlow = {
                1: 2, 2: 3, 3: 4, 4: ED_OBS_ID, 5: 6, 6: 7, 7: 8, 8: PRIMER_STORAGE_ID,
                9: PM_INSPECTION_ID,
                11: PREPARE_ID,
                12: 13, 13: PRIMER_TC_OVEN_ID,
                
                // *** B·ªé QUA TR·∫†M 16 ***
                15: TOPCOAT_INSPECTION_ID, // (15) Topcoat Storage -> (17) Topcoat Inspection
                16: TOPCOAT_INSPECTION_ID, 
                // *** K·∫æT TH√öC B·ªé QUA ***

                18: 19, 19: A1_OBS_ID,
                20: HANGER_AGV_ID,
                22: null
            };
            return mainFlow[currentStationId] !== undefined ? mainFlow[currentStationId] : null;
    }
}

// ======================================
// === KH·ªûI T·∫†O ===
// ======================================

async function initialize(_io, _pool) {
    io = _io;
    pool = _pool;
    if (!pool) { console.error("Initialization Error: pool is not provided!"); return; }

    try {
        const [stationsRows] = await pool.query('SELECT * FROM stations');
        stationsData = stationsRows.reduce((acc, station) => { acc[station.id] = station; return acc; }, {});

        const [vehiclesRows] = await pool.query(SELECT_VEHICLES_QUERY);
        activeVehicles = vehiclesRows.map(vehicle => ({
            ...vehicle,
            stationEntryTime: vehicle.dbStationEntryTime ? new Date(vehicle.dbStationEntryTime).getTime() : Date.now(),
            slotEntryTime: vehicle.slotEntryTime ? new Date(vehicle.slotEntryTime).getTime() : Date.now(), // L·∫•y t·ª´ DB
            status: vehicle.status || 'ok'
        }));

        const [errorTypesRows] = await pool.query('SELECT * FROM error_types');
        errorTypesData = errorTypesRows;

        console.log(`ƒê√£ t·∫£i: ${Object.keys(stationsData).length} tr·∫°m, ${activeVehicles.length} xe, ${errorTypesData.length} lo·∫°i l·ªói.`);
        await logEvent('info', 'H·ªá th·ªëng ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng.');
        updateAndBroadcastState();

    } catch (error) {
        console.error('L·ªói khi t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu:', error);
        await logEvent('error', `L·ªói t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu: ${error.message}`);
    }
}

// ======================================
// === M√î PH·ªéNG CH√çNH ===
// ======================================

function startSimulation() {
    if (simulationIntervalId) return;
    simulationIntervalId = setInterval(simulationTick, SIMULATION_TICK_RATE);
    console.log('B·∫Øt ƒë·∫ßu m√¥ ph·ªèng.');
    logEvent('info', 'M√¥ ph·ªèng b·∫Øt ƒë·∫ßu (tick 1000ms).');
}

/**
 * @description D·ª´ng v√≤ng l·∫∑p m√¥ ph·ªèng ch√≠nh. Kh·∫Øc ph·ª•c l·ªói ReferenceError.
 */
function stopSimulation() { 
    if (simulationIntervalId) {
        clearInterval(simulationIntervalId);
        simulationIntervalId = null;
        console.log('üõë D·ª´ng m√¥ ph·ªèng.');
        logEvent('info', 'M√¥ ph·ªèng ƒë√£ d·ª´ng.');
    }
}


async function simulationTick() {
    let stateChanged = false;

    try {
        const connection = await pool.getConnection();
        await connection.beginTransaction();

        try {
            const now = Date.now();
            
            // ======================================
            // === X·ª¨ L√ù GI·∫¢I PH√ìNG XE B·ªä BLOCKED (B·ªè ch·∫∑n) - KH·∫ÆC PH·ª§C L·ªñI K·∫∏T D√ô TR·∫†M ƒê√çCH TR·ªêNG ===
            // ======================================
            for (const vehicle of activeVehicles) {
                if (vehicle.status === 'blocked') {
                    const nextStationId = getNextStationId(vehicle);
                    if (nextStationId !== null) {
                        const vehiclesAtNextStation = activeVehicles.filter(v => v.current_station_id === nextStationId);
                        const isNextSlot0Empty = !vehiclesAtNextStation.some(v => v.slot_position === 0);

                        if (isNextSlot0Empty) {
                            // Gi·∫£i ph√≥ng xe
                            vehicle.status = 'ok';
                            // C·∫≠p nh·∫≠t v√†o DB
                            await connection.execute('UPDATE vehicles SET status = ? WHERE body_id = ?', ['ok', vehicle.body_id]);
                            stateChanged = true;
                            await logEvent('info', `Xe ${vehicle.body_id} ƒë∆∞·ª£c gi·∫£i ph√≥ng (Block gi·∫£i tr·ª´) t·∫°i ${stationsData[vehicle.current_station_id].name}.`);
                        }
                    }
                }
            }
            // ======================================
            // === K·∫æT TH√öC X·ª¨ L√ù GI·∫¢I PH√ìNG XE B·ªä BLOCKED ===
            // ======================================


            // === X·ª¨ L√ù XE TRONG BUFFER ·∫¢O (current_station_id = 0) - N·∫†P XE T·ª™ PH·∫¢I (SLOT CAO NH·∫§T) ===
            
            const vehiclesInBuffer = activeVehicles
                .filter(v => v.current_station_id === BUFFER_STATION_ID)
                .sort((a, b) => a.slotEntryTime - b.slotEntryTime); // FIFO: C≈© nh·∫•t l√™n ƒë·∫ßu (Xe 01, Xe 02,...)

            const loadingStation = stationsData[LOADING_STATION_ID];

            if (loadingStation && vehiclesInBuffer.length > 0) {
                const vehiclesAtLoading = activeVehicles.filter(v => v.current_station_id === LOADING_STATION_ID);
                
                // Gi·∫£ ƒë·ªãnh Loading c√≥ Capacity 2 (Slot 0 v√† Slot 1)
                let isSlot0Empty = !vehiclesAtLoading.some(v => v.slot_position === 0);
                let isSlot1Empty = !vehiclesAtLoading.some(v => v.slot_position === 1);
                
                const carsToLoad = vehiclesInBuffer.slice(0, 2); // Ch·ªâ xem x√©t 2 xe FIFO
                
                // Duy·ªát qua 2 xe FIFO, ∆∞u ti√™n n·∫°p v√†o slot cao nh·∫•t (Slot 1)
                for (const vehicle of carsToLoad) {
                    let targetSlot = -1;
                    
                    // ∆Øu ti√™n n·∫°p v√†o Slot 1 (b√™n ph·∫£i, slot cao nh·∫•t)
                    if (isSlot1Empty) {
                        targetSlot = 1;
                    } 
                    // Sau ƒë√≥ m·ªõi n·∫°p v√†o Slot 0 (b√™n tr√°i, slot th·∫•p nh·∫•t)
                    else if (isSlot0Empty) {
                        targetSlot = 0;
                    }
                    
                    if (targetSlot === -1) {
                        break; // Kh√¥ng c√≤n slot tr·ªëng trong Loading
                    }

                    // Di chuy·ªÉn xe
                    await moveVehicleToNextStation(vehicle, LOADING_STATION_ID, connection, now, targetSlot);
                    
                    // C·∫≠p nh·∫≠t tr·∫°ng th√°i slot tr·ªëng sau khi di chuy·ªÉn
                    if (targetSlot === 0) isSlot0Empty = false;
                    if (targetSlot === 1) isSlot1Empty = false;
                    stateChanged = true;
                }
            }
            // === K·∫æT TH√öC X·ª¨ L√ù BUFFER ·∫¢O ===


            // === V√íNG L·∫∂P CH√çNH: X·ª¨ L√ù XE TRONG C√ÅC TR·∫†M TH·ª∞C ===
            for (let i = activeVehicles.length - 1; i >= 0; i--) {
                const vehicle = activeVehicles[i];
                // Th√™m try...catch b√™n trong ƒë·ªÉ x·ª≠ l√Ω l·ªói c·ª•c b·ªô (kh·∫Øc ph·ª•c ReferenceError: i is not defined)
                try {
                    const station = stationsData[vehicle.current_station_id];
                    const prevStationId = vehicle.current_station_id;

                    // B·ªè qua n·∫øu xe ƒëang b·ªã ch·∫∑n, d·ª´ng kh·∫©n c·∫•p, ho·∫∑c d√¢y chuy·ªÅn ƒëang t·∫°m d·ª´ng
                    if (!station || vehicle.status === 'blocked' || vehicle.status === 'error_stoppage') continue;
                    
                    // *** LOGIC T·∫†M D·ª™NG M·ªöI (BAO G·ªíM ED OBS) ***
                    const shouldBypassPause = OVEN_STATION_IDS.includes(vehicle.current_station_id) || PAUSE_BYPASS_IDS.includes(vehicle.current_station_id);
                    
                    if (isPausedForNonOvens && !shouldBypassPause) continue;
                    // *** K·∫æT TH√öC LOGIC T·∫†M D·ª™NG M·ªöI ***

                    const entryTime = vehicle.stationEntryTime || now;
                    const slotEntryTime = vehicle.slotEntryTime || now;
                    const stationTaktTime = station.takt_time;
                    const capacity = station.capacity;

                    // *** LOGIC X√ÅC ƒê·ªäNH XE ƒê·∫¶U TI√äN C·∫¶N R·ªúI TR·∫†M ***
                    // T·∫°i Loading (ID 1), xe ·ªü Slot 1 ƒëi tr∆∞·ªõc. ·ªû c√°c tr·∫°m kh√°c, Slot cu·ªëi c√πng (capacity - 1) ƒëi tr∆∞·ªõc.
                    const isFirstToMoveOut = (
                        vehicle.current_station_id === LOADING_STATION_ID ? 
                        vehicle.slot_position === 1 : 
                        vehicle.slot_position === capacity - 1
                    );

                    const requiredTime = isFirstToMoveOut ? stationTaktTime : stationTaktTime / capacity;

                    const elapsedSlotTime = now - slotEntryTime;
                    const elapsedStationTime = now - entryTime;
                    // *** K·∫æT TH√öC LOGIC X√ÅC ƒê·ªäNH XE ƒê·∫¶U TI√äN ***
                    
                    let handled = false;
                    if (vehicle.current_station_id === PM_INSPECTION_ID) {
                        handled = await handlePMInspection(vehicle, connection);
                        if (handled) stateChanged = true;
                    } else if (vehicle.current_station_id === TOPCOAT_INSPECTION_ID) {
                        handled = await handleTopcoatInspection(vehicle, connection);
                        if (handled) stateChanged = true;
                    }

                    if (handled) continue;

                    // PHASE 2A: X·ª≠ l√Ω xe ·ªü v·ªã tr√≠ di chuy·ªÉn ra (Slot 1 cho Loading, Slot cu·ªëi cho c√°c tr·∫°m kh√°c)
                    if (isFirstToMoveOut && elapsedStationTime >= requiredTime) {
                        
                        // *** S·ª¨A L·ªñI: ƒê√ìNG BƒÇNG XE T·∫†I SLOT CU·ªêI OFFLINE REPAIR ***
                        if (vehicle.current_station_id === OFFLINE_REPAIR_ID && vehicle.status === 'rework_pending') {
                            continue; // ƒê√≥ng bƒÉng t·∫°i slot cu·ªëi, ch·ªù l·ªánh (OK/NG)
                        }
                        // *** K·∫æT TH√öC S·ª¨A L·ªñI ƒê√ìNG BƒÇNG ***
                        
                        const nextStationId = getNextStationId(vehicle);
                        let isVehicleMovingOut = false; // C·ªù theo d√µi xe c√≥ r·ªùi ƒëi kh√¥ng

                        if (nextStationId === null) {
                            await completeVehicle(vehicle, connection);
                            activeVehicles.splice(i, 1);
                            stateChanged = true;
                            isVehicleMovingOut = true; // Xe ho√†n th√†nh (r·ªùi ƒëi)
                            continue;
                        }

                        const nextStation = stationsData[nextStationId];
                        const nextStationVehicles = activeVehicles.filter(v => v.current_station_id === nextStationId);
                        
                        if (!nextStation) {
                            // X·ª≠ l√Ω l·ªói logic khi kh√¥ng t√¨m th·∫•y tr·∫°m ti·∫øp theo
                            vehicle.status = 'error_logic';
                            await logEvent('error', `L·ªói logic: Kh√¥ng t√¨m th·∫•y tr·∫°m ${nextStationId} cho xe ${vehicle.body_id}.`);
                            continue;
                        }

                        const isNextSlotEmpty = !nextStationVehicles.some(v => v.slot_position === 0);

                        // *** LOGIC CH·∫∂N L·ªêI RA TR·∫†M BYPASS/OVEN KHI D√ÇY CHUY·ªÄN D·ª™NG ***
                        const isNextStationBypass = OVEN_STATION_IDS.includes(nextStationId) || PAUSE_BYPASS_IDS.includes(nextStationId);
                        
                        if (isPausedForNonOvens && !isNextStationBypass) {
                             // N·∫øu d√¢y chuy·ªÅn ƒëang d·ª´ng V√Ä tr·∫°m ƒë√≠ch KH√îNG ph·∫£i l√† tr·∫°m bypass (VD: ED Inspection)
                             vehicle.status = 'blocked';
                             stateChanged = true;
                             continue; // NgƒÉn kh√¥ng cho logic di chuy·ªÉn b√™n d∆∞·ªõi ch·∫°y
                        }
                        // *** K·∫æT TH√öC LOGIC CH·∫∂N L·ªêI RA ***
                        
                        // Logic di chuy·ªÉn (ch·ªâ ch·∫°y khi kh√¥ng b·ªã ch·∫∑n b·ªüi PAUSE ho·∫∑c b·ªã chi·∫øm slot)
                        if (isNextSlotEmpty) {
                            // Di chuy·ªÉn xe ra kh·ªèi tr·∫°m hi·ªán t·∫°i
                            await moveVehicleToNextStation(vehicle, nextStationId, connection, now);
                            // KH√îNG C√ì splice(i, 1) ·ªü ƒë√¢y. Xe v·∫´n l√† active, ch·ªâ c·∫ßn update v·ªã tr√≠
                            stateChanged = true;
                            isVehicleMovingOut = true; // Xe di chuy·ªÉn (r·ªùi ƒëi)

                            if (CHECKPOINT_STATION_IDS.includes(nextStationId)) {
                                io.emit('vehicle-checkpoint', { 
                                    message: `Xe ${vehicle.body_id} ƒë√£ ƒë·∫øn checkpoint ${nextStation.name}.`, 
                                    type: 'info' 
                                });
                            }
                        } else {
                            vehicle.status = 'blocked';
                            stateChanged = true;
                        }

                        // *** LOGIC D·ªíN CH·ªñ CHO TR·∫†M LOADING (D·ªíN V·ªÄ PH·∫¢I) ***
                        // √Åp d·ª•ng d·ªìn ch·ªó khi xe v·ª´a di chuy·ªÉn ra (isVehicleMovingOut) V√Ä tr·∫°m tr∆∞·ªõc ƒë√≥ l√† Loading
                        if (isVehicleMovingOut && prevStationId === LOADING_STATION_ID) {
                            const loadingVehicles = activeVehicles
                                .filter(v => v.current_station_id === LOADING_STATION_ID)
                                .sort((a, b) => a.slot_position - b.slot_position); // Slot nh·ªè nh·∫•t l√™n ƒë·∫ßu (Slot 0)

                            // T√¨m xe ·ªü Slot 0 c·∫ßn d·ªìn l√™n Slot 1
                            const shiftVehicle = loadingVehicles.find(v => v.slot_position === 0);
                            
                            if (shiftVehicle) { 
                                const newSlot = 1; // D·ªìn t·ª´ 0 l√™n 1 (ph·∫£i)
                                
                                // B·ªè qua n·∫øu Slot 1 ƒë√£ c√≥ xe
                                const isSlot1Occupied = activeVehicles.some(v => 
                                    v.current_station_id === LOADING_STATION_ID && 
                                    v.slot_position === newSlot
                                );

                                if (!isSlot1Occupied) {
                                    // C·∫≠p nh·∫≠t v·ªã tr√≠ v√† th·ªùi gian v√†o slot m·ªõi
                                    shiftVehicle.slot_position = newSlot; 
                                    shiftVehicle.slotEntryTime = now;
                                    
                                    await connection.execute(
                                        'UPDATE vehicles SET slot_position = ?, slotEntryTime = ? WHERE body_id = ?', 
                                        [newSlot, new Date(now), shiftVehicle.body_id]
                                    );
                                    await logEvent('info', `Xe ${shiftVehicle.body_id} d·ªìn ch·ªó t·ª´ slot 0 sang slot 1 (ph·∫£i) t·∫°i Loading.`);
                                    stateChanged = true;
                                }
                            }
                        }
                        // *** K·∫æT TH√öC LOGIC D·ªíN CH·ªñ ***

                    } else if (elapsedSlotTime >= (stationTaktTime / capacity)) {
                        // PHASE 2B: Logic di chuy·ªÉn slot n·ªôi b·ªô (ch·ªâ √°p d·ª•ng cho c√°c tr·∫°m KH√îNG ph·∫£i Loading)
                        if (vehicle.current_station_id !== LOADING_STATION_ID) {
                             const nextSlot = vehicle.slot_position + 1;
                            if (nextSlot < capacity) {
                                const isNextSlotEmpty = !activeVehicles.some(v => 
                                    v.current_station_id === vehicle.current_station_id && v.slot_position === nextSlot
                                );
                                if (isNextSlotEmpty) {
                                    vehicle.slot_position = nextSlot;
                                    vehicle.slotEntryTime = now;
                                    await connection.execute('UPDATE vehicles SET slot_position = ? WHERE body_id = ?', [nextSlot, vehicle.body_id]);
                                    stateChanged = true;
                                }
                            }
                        }
                    }
                } catch (error) {
                    console.error(`L·ªói nghi√™m tr·ªçng khi x·ª≠ l√Ω xe ${vehicle.body_id}:`, error);
                    await logEvent('error', `L·ªói nghi√™m tr·ªçng khi x·ª≠ l√Ω xe ${vehicle.body_id}: ${error.message}`);
                    // Re-throw ƒë·ªÉ k√≠ch ho·∫°t rollback transaction
                    throw error;
                }
            }
            // === K·∫æT TH√öC V√íNG L·∫∂P CH√çNH ===

            await connection.commit();
        } catch (error) {
            // L·ªói x·∫£y ra b√™n trong transaction (v√≠ d·ª•: l·ªói DB, ho·∫∑c l·ªói re-throw t·ª´ v√≤ng l·∫∑p)
            await connection.rollback();
            console.error('L·ªói trong transaction simulationTick:', error);
            await logEvent('error', `L·ªói trong transaction simulationTick: ${error.message}`);
        } finally {
            connection.release();
        }
    } catch (error) {
        // L·ªói kh√¥ng l·∫•y ƒë∆∞·ª£c connection DB
        console.error('L·ªói k·∫øt n·ªëi DB trong simulationTick:', error);
        await logEvent('error', `L·ªói k·∫øt n·ªëi DB trong simulationTick: ${error.message}`);
    }

    if (stateChanged) updateAndBroadcastState();
}

// ======================================
// === X·ª¨ L√ù TR·∫†M KI·ªÇM TRA ===
// ======================================

async function handlePMInspection(vehicle, connection) {
    if (vehicle.primer_lap_count < 1 && vehicle.current_error_type_id === null && 
        !['rework', 'rework_offline', 'rework_pending'].includes(vehicle.status)) {
        if (Math.random() < PM_INSPECTION_FAILURE_RATE) {
            vehicle.status = 'rework';
            const err = errorTypesData.length > 0 
                ? errorTypesData[Math.floor(Math.random() * errorTypesData.length)]
                : { id: null, name: 'Kh√¥ng x√°c ƒë·ªãnh' };
            vehicle.current_error_type_id = err.id;
            vehicle.current_error_name = err.name;

            await connection.execute(
                'UPDATE vehicles SET status = ?, current_error_type_id = ? WHERE body_id = ?',
                [vehicle.status, err.id, vehicle.body_id]
            );

            const entryTime = vehicle.stationEntryTime ? new Date(vehicle.stationEntryTime) : new Date();
            await connection.execute(
                'INSERT INTO error_logs (body_id, station_id, error_type_id, start_time) VALUES (?, ?, ?, ?)',
                [vehicle.body_id, PM_INSPECTION_ID, err.id, entryTime]
            );

            await logEvent('warning', `Xe ${vehicle.body_id} l·ªói [${err.name}] (V√≤ng ${vehicle.primer_lap_count}). ƒê√£ chuy·ªÉn ƒë·∫øn PM Repair.`);
            if (io) io.emit('vehicle-rework-alert', { message: `Xe ${vehicle.body_id} l·ªói [${err.name}].`, type: 'error' });
            return true;
        }
    }
    return false;
}

async function handleTopcoatInspection(vehicle, connection) {
    if (vehicle.current_error_type_id === null && 
        !['rework_pending', 'rework_offline'].includes(vehicle.status)) {
        if (Math.random() < TOPCOAT_FAILURE_RATE) {
            // L·∫•y ID l·ªói ng·∫´u nhi√™n ƒë·ªÉ l∆∞u v√†o log (nh∆∞ng kh√¥ng c·∫≠p nh·∫≠t v√†o vehicle.current_error_type_id)
            const err = errorTypesData.length > 0 
                ? errorTypesData[Math.floor(Math.random() * errorTypesData.length)]
                : { id: null, name: 'Kh√¥ng x√°c ƒë·ªãnh' };

            vehicle.status = 'rework_pending';
            vehicle.current_error_type_id = null;
            vehicle.current_error_name = null;

            await connection.execute(
                'UPDATE vehicles SET status = ?, current_error_type_id = ? WHERE body_id = ?',
                ['rework_pending', null, vehicle.body_id]
            );

            const entryTime = vehicle.stationEntryTime ? new Date(vehicle.stationEntryTime) : new Date();
            await connection.execute(
                'INSERT INTO error_logs (body_id, station_id, start_time, error_type_id) VALUES (?, ?, ?, ?)',
                [vehicle.body_id, TOPCOAT_INSPECTION_ID, entryTime, err.id]
                // G·∫Øn err.id v√†o error_logs ƒë·ªÉ c√≥ th√¥ng tin v·ªÅ lo·∫°i l·ªói ban ƒë·∫ßu
            );

            await logEvent('warning', `Xe ${vehicle.body_id} l·ªói t·∫°i Topcoat Inspection. Chuy·ªÉn ƒë·∫øn Offline Repair.`);
            if (io) io.emit('vehicle-rework-alert', { message: `Xe ${vehicle.body_id} l·ªói Topcoat.`, type: 'error' });
            return true;
        }
    }
    return false;
}

// ======================================
// === DI CHUY·ªÇN & HO√ÄN TH√ÄNH ===
// ======================================

async function moveVehicleToNextStation(vehicle, nextStationId, connection, now, targetSlot = 0) {
    const prevStationId = vehicle.current_station_id;
    const prevStation = stationsData[prevStationId];
    
    // *** S·ª¨A L·ªñI HI·ªÇN TH·ªä M√ÄU V√ÄNG ***
    // Ch·ªâ reset status v·ªÅ 'ok' n·∫øu tr·∫°m ti·∫øp theo KH√îNG ph·∫£i l√† tr·∫°m repair
    // Tr·∫°ng th√°i 'rework' ho·∫∑c 'rework_pending' s·∫Ω ƒë∆∞·ª£c gi·ªØ nguy√™n khi di chuy·ªÉn v√†o tr·∫°m Repair.
    if (nextStationId !== PM_REPAIR_ID && nextStationId !== OFFLINE_REPAIR_ID && nextStationId !== WAIT_RECOAT_ID) {
         vehicle.status = 'ok';
    }
    // *** K·∫æT TH√öC S·ª¨A L·ªñI ***

    vehicle.current_station_id = nextStationId;
    vehicle.slot_position = targetSlot;
    vehicle.stationEntryTime = now;
    vehicle.slotEntryTime = now;
    // vehicle.status = 'ok'; // <-- D√íNG G·ªêC B·ªä X√ìA

    // *******************************************************************
    // === LOGIC M·ªöI: S·ª¨A L·ªñI ƒê·∫æM V√íNG L·∫∂P PRIMER ===
    //
    // X√≥a logic c≈©:
    // if (nextStationId === PRIMER_TC_OVEN_ID) {
    //     vehicle.primer_lap_count += 1;
    // }
    //
    // Th√™m logic m·ªõi:
    // Ch·ªâ tƒÉng bi·∫øn ƒë·∫øm KHI xe ƒëi t·ª´ L√≤ (14) quay l·∫°i Kho (9).
    // Logic `getNextStationId` s·∫Ω ki·ªÉm tra (count=0) v√† g·ª≠i ƒë·∫øn 9.
    // H√†m n√†y (moveVehicle) s·∫Ω tƒÉng count l√™n 1.
    // L·∫ßn sau, `getNextStationId` ki·ªÉm tra (count=1) v√† g·ª≠i ƒë·∫øn 15.
    
    if (prevStationId === PRIMER_TC_OVEN_ID && nextStationId === PRIMER_STORAGE_ID) {
        vehicle.primer_lap_count += 1;
        await logEvent('info', `Xe ${vehicle.body_id} ho√†n th√†nh v√≤ng s∆°n l√≥t, quay l·∫°i Primer Storage (l·∫ßn ${vehicle.primer_lap_count}).`);
    }
    // *******************************************************************

    await connection.execute(
        'UPDATE vehicles SET current_station_id = ?, slot_position = ?, stationEntryTime = ?, slotEntryTime = ?, status = ?, primer_lap_count = ? WHERE body_id = ?',
        // D√πng vehicle.status (ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ·ªü tr√™n) thay v√¨ 'ok'
        [nextStationId, targetSlot, new Date(now), new Date(now), vehicle.status, vehicle.primer_lap_count, vehicle.body_id]
    );

    // Ghi log chi ti·∫øt vi·ªác di chuy·ªÉn
    const nextStation = stationsData[nextStationId];
    await logEvent('info', `Xe ${vehicle.body_id} di chuy·ªÉn t·ª´ ${prevStation ? prevStation.name : 'Buffer'} v√†o ${nextStation ? nextStation.name : 'V·ªã tr√≠ m·ªõi'} slot ${targetSlot}.`);
}

async function completeVehicle(vehicle, connection) {
    await connection.execute('DELETE FROM vehicles WHERE body_id = ?', [vehicle.body_id]);
    await logEvent('success', `Ho√†n th√†nh: ${vehicle.body_id}.`);
    if (io) io.emit('vehicle-completed', { message: `Xe ${vehicle.body_id} ho√†n th√†nh quy tr√¨nh s∆°n!`, type: 'success' });
}

// ======================================
// === T·∫†M D·ª™NG / TI·∫æP T·ª§C ===
// ======================================

async function pauseLine() {
    isPausedForNonOvens = true;
    console.log('D√¢y chuy·ªÅn t·∫°m d·ª´ng (tr·ª´ l√≤ s·∫•y).');
    await logEvent('warning', 'D√¢y chuy·ªÅn ƒë√£ t·∫°m d·ª´ng (tr·ª´ l√≤ s·∫•y).');
    if (io) io.emit('line-status-update', 'paused');
}

async function playLine() {
    isPausedForNonOvens = false;
    console.log('D√¢y chuy·ªÅn ti·∫øp t·ª•c.');
    await logEvent('info', 'D√¢y chuy·ªÅn ƒë√£ ho·∫°t ƒë·ªông tr·ªü l·∫°i.');
    if (io) io.emit('line-status-update', 'running');
}

// ======================================
// === TH√äM / X√ìA XE ===
// ======================================

async function addVehicle(body_id) {
    if (!body_id) throw new Error('M√£ th√¢n xe (body_id) l√† b·∫Øt bu·ªôc.');

    // Ki·ªÉm tra xe c√≥ t·ªìn t·∫°i trong DB kh√¥ng
    const [bodyRows] = await pool.query('SELECT * FROM car_bodies WHERE body_id = ?', [body_id]);
    if (bodyRows.length === 0) {
        await logEvent('error', `L·ªói th√™m xe ${body_id}: M√£ th√¢n xe "${body_id}" kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.`);
        throw new Error(`M√£ th√¢n xe "${body_id}" kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.`);
    }

    // Ki·ªÉm tra xe c√≥ ƒëang ho·∫°t ƒë·ªông trong d√¢y chuy·ªÅn kh√¥ng
    if (activeVehicles.some(v => v.body_id === body_id)) {
        await logEvent('error', `L·ªói th√™m xe ${body_id}: Xe "${body_id}" ƒë√£ c√≥ trong d√¢y chuy·ªÅn.`);
        throw new Error(`Xe "${body_id}" ƒë√£ c√≥ trong d√¢y chuy·ªÅn.`);
    }

    try {
        const now = Date.now();
        // C·∫¨P NH·∫¨T: Th√™m c·ªôt slotEntryTime v√†o c√¢u l·ªánh INSERT (Sau khi b·∫°n ƒë√£ ALTER TABLE)
        const [result] = await pool.execute(
            'INSERT INTO vehicles (body_id, current_station_id, status, primer_lap_count, slot_position, stationEntryTime, slotEntryTime) VALUES (?, ?, "ok", 0, 0, ?, ?)',
            [body_id, BUFFER_STATION_ID, new Date(now), new Date(now)]
        );

        // ƒê·ªçc l·∫°i th√¥ng tin chi ti·∫øt c·ªßa xe v·ª´a th√™m (c·∫ßn JOIN)
        const [newVehicleRows] = await pool.query(SELECT_VEHICLES_QUERY + ' WHERE v.id = ?', [result.insertId]);
        const newVehicle = newVehicleRows[0];

        activeVehicles.push({
            ...newVehicle,
            stationEntryTime: now,
            slotEntryTime: now
        });

        await logEvent('success', `Th√™m xe m·ªõi: ${body_id} v√†o buffer ch·ªù.`);
        updateAndBroadcastState();
    } catch (error) {
        console.error(`L·ªói khi th√™m xe ${body_id}:`, error);
        await logEvent('error', `L·ªói th√™m xe ${body_id}: ${error.message}`);
        throw error;
    }
}

async function removeVehicle(body_id) {
    const index = activeVehicles.findIndex(v => v.body_id === body_id);
    if (index === -1) {
        throw new Error(`Xe ${body_id} kh√¥ng c√≥ trong d√¢y chuy·ªÅn ho·∫∑c buffer.`);
    }

    const vehicleToRemove = activeVehicles[index];
    
    try {
        await pool.execute('DELETE FROM vehicles WHERE body_id = ?', [body_id]);
        activeVehicles.splice(index, 1);
        await logEvent('warning', `Xe ${body_id} ƒë√£ b·ªã x√≥a kh·ªèi tr·∫°m/buffer.`);
        if (io) io.emit('action-confirmed', { message: `Xe ${body_id} ƒë√£ b·ªã x√≥a th√†nh c√¥ng.`, type: 'info' });
        updateAndBroadcastState();
    } catch (error) {
        console.error(`L·ªói DB khi x√≥a xe ${body_id}:`, error);
        await logEvent('error', `L·ªói DB khi x√≥a xe ${body_id}: ${error.message}`);
        throw new Error(`Kh√¥ng th·ªÉ x√≥a xe kh·ªèi CSDL. ${error.message}`);
    }
}

async function emergencyStopAndClear() {
    stopSimulation();
    try {
        await pool.execute('DELETE FROM vehicles WHERE 1=1');
        activeVehicles = [];
        await logEvent('error', 'D·ª´ng kh·∫©n c·∫•p: D√¢y chuy·ªÅn d·ª´ng, xe ƒë√£ x√≥a.');
        updateAndBroadcastState();
    } catch (error) {
        console.error('L·ªói d·ª´ng kh·∫©n c·∫•p:', error);
        await logEvent('error', `L·ªói d·ª´ng kh·∫©n c·∫•p: ${error.message}`);
        throw error;
    }
}


// ======================================
// === X·ª¨ L√ù REWORK OFFLINE ===
// ======================================

async function confirmVehicleError(body_id, errorDescription, socket) {
    const vehicle = activeVehicles.find(v => v.body_id === body_id);
    if (vehicle && vehicle.status === 'rework_pending' && vehicle.current_station_id === OFFLINE_REPAIR_ID) {
        const entryTime = vehicle.stationEntryTime ? new Date(vehicle.stationEntryTime) : new Date();
        try {
            await pool.execute(
                'INSERT INTO error_logs (body_id, station_id, manual_description, start_time) VALUES (?, ?, ?, ?)',
                [body_id, OFFLINE_REPAIR_ID, errorDescription || 'N/A', entryTime]
            );
            vehicle.status = 'ok';
            vehicle.current_error_type_id = null;
            vehicle.current_error_name = null;

            await pool.execute(
                'UPDATE vehicles SET status = ?, current_error_type_id = ? WHERE body_id = ?',
                ['ok', null, body_id]
            );

            await logEvent('info', `X√°c nh·∫≠n s·ª≠a l·ªói "${errorDescription || 'N/A'}" cho xe ${body_id} t·∫°i Offline Repair. Xe s·∫µn s√†ng di chuy·ªÉn.`);
            if (io) io.emit('action-confirmed', { message: `Xe ${body_id} ƒë√£ s·ª≠a xong.`, type: 'success' });
            updateAndBroadcastState();
        } catch (error) {
            console.error(`L·ªói DB khi x√°c nh·∫≠n l·ªói xe ${body_id}:`, error);
            await logEvent('error', `L·ªói DB khi x√°c nh·∫≠n l·ªói xe ${body_id}: ${error.message}`);
            if (socket) socket.emit('action-error', { message: `Kh√¥ng th·ªÉ x√°c nh·∫≠n s·ª≠a xe ${body_id} do l·ªói CSDL.` });
        }
    } else {
        if (socket) socket.emit('action-error', { message: `Xe ${body_id} kh√¥ng ·ªü tr·∫°ng th√°i c·∫ßn x√°c nh·∫≠n.` });
    }
}

async function sendVehicleToRecoat(body_id, errorDescription, socket) {
    const vehicle = activeVehicles.find(v => v.body_id === body_id);
    if (vehicle && vehicle.status === 'rework_pending' && vehicle.current_station_id === OFFLINE_REPAIR_ID) {
        const entryTime = vehicle.stationEntryTime ? new Date(vehicle.stationEntryTime) : new Date();
        try {
            // C·∫≠p nh·∫≠t error_logs v·ªõi m√¥ t·∫£ th·ªß c√¥ng v√† th·ªùi gian k·∫øt th√∫c l·ªói ban ƒë·∫ßu (tr∆∞·ªõc khi g·ª≠i ƒëi recoat)
            await pool.execute(
                'INSERT INTO error_logs (body_id, station_id, manual_description, start_time) VALUES (?, ?, ?, ?)',
                [body_id, OFFLINE_REPAIR_ID, errorDescription, entryTime]
            );

            vehicle.status = 'rework_offline';
            vehicle.current_error_type_id = null;
            vehicle.current_error_name = null;

            await pool.execute(
                'UPDATE vehicles SET status = ?, current_error_type_id = ? WHERE body_id = ?',
                ['rework_offline', null, body_id]
            );

            await logEvent('warning', `Xe ${body_id} [${errorDescription}] kh√¥ng th·ªÉ s·ª≠a, g·ª≠i ƒëi s∆°n l·∫°i (Wait Recoat).`);
            if (io) io.emit('action-confirmed', { message: `Xe ${body_id} ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn Wait Recoat.`, type: 'warning' });
            updateAndBroadcastState();
        } catch (error) {
            console.error(`L·ªói DB khi g·ª≠i xe ${body_id} ƒëi Wait Recoat:`, error);
            await logEvent('error', `L·ªói DB khi g·ª≠i xe ${body_id} ƒëi recoat: ${error.message}`);
            if (socket) socket.emit('action-error', { message: `Kh√¥ng th·ªÉ g·ª≠i xe ${body_id} ƒëi Wait Recoat do l·ªói CSDL.` });
        }
    } else {
        if (socket) socket.emit('action-error', { message: `Xe ${body_id} kh√¥ng ·ªü tr·∫°ng th√°i c·∫ßn g·ª≠i ƒëi WR.` });
    }
}

// ======================================
// === B√ÅO L·ªñI V·∫¨N H√ÄNH ===
// ======================================

function reportOperationalError(stationId) {
    const station = stationsData[stationId];
    if (station) {
        const message = `S·ª± c·ªë m√°y m√≥c t·∫°i tr·∫°m: ${station.name}.`;
        console.log(`${message}`);
        logEvent('error', message);
        if (io) io.emit('operational-error', { stationName: station.name, message });

        pauseLine();

        activeVehicles
            .filter(v => v.current_station_id === stationId)
            .forEach(v => {
                v.status = 'error_stoppage';
                pool.execute('UPDATE vehicles SET status = ? WHERE body_id = ?', ['error_stoppage', v.body_id])
                    .catch(err => console.error(`L·ªói c·∫≠p nh·∫≠t DB cho error_stoppage xe ${v.body_id}:`, err));
            });
        updateAndBroadcastState();
    } else {
        console.error(`[ReportError] Kh√¥ng t√¨m th·∫•y tr·∫°m v·ªõi ID: ${stationId}`);
    }
}

// ======================================
// === EXPORT MODULE ===
// ======================================
module.exports = {
    initialize,
    start: startSimulation,
    stop: stopSimulation,
    pauseLine,
    playLine,
    addVehicle,
    removeVehicle, // Th√™m h√†m removeVehicle
    emergencyStopAndClear, // Th√™m h√†m emergencyStopAndClear
    getState,
    reportOperationalError,
    confirmVehicleError,
    sendVehicleToRecoat
};